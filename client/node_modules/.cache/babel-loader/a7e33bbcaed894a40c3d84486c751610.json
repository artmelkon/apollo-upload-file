{"ast":null,"code":"var _jsxFileName = \"/Users/artmelkon/webdev/apollo-file-upload/client/src/components/Upload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useMutation } from \"@apollo/client\"; // import { Mutation } fron '@apollo/client/react/components'\n// import { UPLOAD_FILE } from \"../queries\";\n// import { GET_ALL_FILES, UPLOAD_FILE } from \"../queries\";\n\nimport { GET_ALL_FILES } from \"./Files\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UPLOAD_FILE = gql`\n  mutation UploadFile($file: Upload!) {\n    uploadFile(file: $file)\n  }\n`;\nexport const Upload = () => {\n  _s();\n\n  const [uploadFile] = useMutation(UPLOAD_FILE, {\n    refetchQueries: [{\n      query: GET_ALL_FILES\n    }]\n  });\n  const onDrop = useCallback(([file]) => {\n    uploadFile({\n      variables: {\n        file\n      }\n    });\n  }, [uploadFile]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drop the file here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drag 'n' drop some files here, or click to selec tfiles\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Upload, \"Ym+0XAtA5JNW28HTeTkxO4kBnO4=\", false, function () {\n  return [useMutation, useDropzone];\n});\n\n_c = Upload;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"sources":["/Users/artmelkon/webdev/apollo-file-upload/client/src/components/Upload.js"],"names":["React","useCallback","useDropzone","useMutation","GET_ALL_FILES","UPLOAD_FILE","gql","Upload","uploadFile","refetchQueries","query","onDrop","file","variables","getRootProps","getInputProps","isDragActive"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,WAAT,QAA4B,gBAA5B,C,CACA;AAEA;AACA;;AACA,SAASC,aAAT,QAA8B,SAA9B;;AAEA,OAAO,MAAMC,WAAW,GAAGC,GAAI;AAC/B;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,UAAD,IAAeL,WAAW,CAACE,WAAD,EAAc;AAC5CI,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAEN;AAAT,KAAD;AAD4B,GAAd,CAAhC;AAIA,QAAMO,MAAM,GAAGV,WAAW,CACxB,CAAC,CAACW,IAAD,CAAD,KAAY;AACVJ,IAAAA,UAAU,CAAC;AAAEK,MAAAA,SAAS,EAAE;AAAED,QAAAA;AAAF;AAAb,KAAD,CAAV;AACD,GAHuB,EAIxB,CAACJ,UAAD,CAJwB,CAA1B;AAMA,QAAM;AAAEM,IAAAA,YAAF;AAAgBC,IAAAA,aAAhB;AAA+BC,IAAAA;AAA/B,MAAgDd,WAAW,CAAC;AAAES,IAAAA;AAAF,GAAD,CAAjE;AAEA,sBACE,oBAASG,YAAY,EAArB;AAAA,4BACE,sBAAWC,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,YAAY,gBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADW,gBAGX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAvBM;;GAAMT,M;UACUJ,W,EAUiCD,W;;;KAX3CK,M","sourcesContent":["import React, { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useMutation } from \"@apollo/client\";\n// import { Mutation } fron '@apollo/client/react/components'\n\n// import { UPLOAD_FILE } from \"../queries\";\n// import { GET_ALL_FILES, UPLOAD_FILE } from \"../queries\";\nimport { GET_ALL_FILES } from \"./Files\";\n\nexport const UPLOAD_FILE = gql`\n  mutation UploadFile($file: Upload!) {\n    uploadFile(file: $file)\n  }\n`;\n\nexport const Upload = () => {\n  const [uploadFile] = useMutation(UPLOAD_FILE, {\n    refetchQueries: [{ query: GET_ALL_FILES }],\n  });\n\n  const onDrop = useCallback(\n    ([file]) => {\n      uploadFile({ variables: { file } });\n    },\n    [uploadFile]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      {isDragActive ? (\n        <p>Drop the file here...</p>\n      ) : (\n        <p>Drag 'n' drop some files here, or click to selec tfiles</p>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}